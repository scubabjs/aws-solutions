#!/bin/sh
#
# scubabjs@gmail.com
# 3/31/2022
#
#
WORK=/home/scubabjs/work/encrypt-root/
BIN=/home/scubabjs/bin
LOG=$WORK/log
#
touch $LOG/snapswap.txt
touch $LOG/encryptedswap.txt
#
# Control How much screen output is provided.
#
pause='0'
verbose='1'
debug='1'
#
host=$1
voltype='gp2'
state='pending'
period='3'
waittime='0'
sshargs='-o StrictHostKeyChecking=no -n -q'
#
#
if [[ "$1" == "" ]] || [[ $# -gt 2 ]]; then
 echo "USAGE: $0  <hostname> [filesystem]"
 exit 1
fi
#
vaildhost=`$BIN/awslookup $host hostname`
if [[ $vaildhost != $host ]]; then
  echo "ERROR: $host is not a vaild/existing hostname in the database."
  exit 1
fi
#
# Allow overide of the filesystem setting.
#
if [[ $2 == "" ]]; then
#
# Marklogic nodes have a different labled root volume.
#
  if [[ $host == *"mle"* ]] || [[ $host == *"mld"* ]]; then
     fs='xvds'
     echo "Setting filesystem setting to $fs"
  else
     fs='sdb1'
  fi
else
  fs=$2
  echo "Overiding filesystem setting to $fs"
fi
#
eth0=`$BIN/awslookup $1 eth0`
profile=`$BIN/awslookup $1 profile`
instance=`$BIN/awslookup $1 instance`
name=`$BIN/awslookup $1 name`
az=`$BIN/awslookup $1 az`
#
if [[ $debug == '1' ]]; then
 echo
 echo $fs,$host,$profile,$instance,$az
 echo
fi
#
volume=`/usr/local/bin/aws ec2 describe-volumes --output=text --profile=$profile --filters Name=attachment.instance-id,Values=$instance --query 'Volumes[*].[Attachments[0].InstanceId,Attachments[0].VolumeId,Attachments[0].State,Size,Attachments[0].Device]' | grep $fs | awk '{print $2}'`
#
if [[ $debug == '1' ]]; then
 echo
 echo $fs,$host,$profile,$instance,$az,$volume
 echo
fi
#
snapshot=`/usr/local/bin/aws ec2 create-snapshot --profile=$profile --volume-id $volume --description "$host,$volume,$fs"  | tee -a $LOG/snapshots.txt | awk -F\" '/snap-/{print $4}'`
#
if [[ $debug == '1' ]]; then
 echo
 echo $fs,$host,$profile,$instance,$az,$volume,$snapshot
 echo
fi
#
state='creating'
waittime='0'
while [ "$state" != "completed" ]
do
  echo "Snapshot creation....($waittime's)..$state"
  sleep $period
  state=`/usr/local/bin/aws ec2 describe-snapshots --profile=$profile --snapshot-ids $snapshot | awk -F\" '/State/{print $4}'`
  waittime=$(($waittime+$period))
done
if [[ $verbose == '1' ]]; then
 /usr/local/bin/aws ec2 describe-snapshots --profile=$profile --snapshot-ids $snapshot
else
  echo "Snapshot creation....($waittime's)..$state"
fi
#
evolume=`/usr/local/bin/aws ec2 create-volume --encrypted --profile $profile --volume-type $voltype --snapshot-id $snapshot --availability-zone $az --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=$name-ec2},{Key=rootvol,Value=encrypted}]" | tee -a $LOG/encryptedvolumes.txt | awk -F\" '/vol-/{print $4}'`
#
if [[ $debug == '1' ]]; then
 echo
 echo $fs,$host,$profile,$instance,$az,$volume,$snapshot,$evolume
 echo
fi
#
state='creating'
waittime='0'
while [ "$state" != "available" ]
do
  echo "Volume creation....($waittime's)..$state"
  sleep $period
  state=`/usr/local/bin/aws ec2 describe-volumes --profile=$profile --volume-ids $evolume | awk -F\" '/State/{print $4}'`
  waittime=$(($waittime+$period))
done
if [[ $verbose == '1' ]]; then
 /usr/local/bin/aws ec2 describe-volumes --profile=$profile --volume-ids $evolume
else
  echo "Volume creation....($waittime's)..$state"
fi
#
#ssh $eth0 $sshargs "/usr/sbin/blkid"
#
device=`ssh $eth0 $sshargs "/usr/sbin/blkid" | awk -F : '/swap/{print $1}'`
uuid=`ssh $eth0 $sshargs "/usr/sbin/blkid" | awk -F \" '/swap/{print $2}'`
if [[ $debug == '1' ]]; then
  echo "DEV: $device UUID: $uuid"
fi
#
#ssh $sshargs $eth0 bash -s < $WORK/swapoff.sh
ssh $sshargs $eth0 "sudo /usr/sbin/swapoff -a"
#
sleep 2
#
if [[ $verbose == '1' ]]; then
  /usr/local/bin/aws ec2 detach-volume --profile $profile --instance-id $instance --volume-id $volume
else
  /usr/local/bin/aws ec2 detach-volume --profile $profile --instance-id $instance --volume-id $volume > /dev/null 2>&1
fi
state='detaching'
while [[ "$state" != "available" ]]
do
  sleep $period
  state=`/usr/local/bin/aws ec2 describe-volumes --profile=$profile --volume-ids $volume |  awk -F\" '/State/{print $4}'`
  echo $volume $state from $instance
done
#
sleep 2
#
if [[ $verbose == '1' ]]; then
  /usr/local/bin/aws ec2 attach-volume --profile $profile --instance-id $instance --volume-id $evolume --device /dev/$fs
  echo $evolume $state to $instance
else
  /usr/local/bin/aws ec2 attach-volume --profile $profile --instance-id $instance --volume-id $evolume --device /dev/$fs  > /dev/null 2>&1
  echo $evolume $state to $instance
fi
#
#
sleep 2
#
ssh $eth0 $sshargs "sudo /usr/sbin/swapon -a"
#
if [[ $verbose == '1' ]]; then
  ssh $eth0 $sshargs "/usr/sbin/blkid" | awk -F : '/swap/{print $1}'
  ssh $eth0 $sshargs "sudo /usr/sbin/swapon -s"
  /usr/local/bin/aws ec2 describe-volumes --output=text --profile=$profile --filters Name=attachment.instance-id,Values=$instance --query 'Volumes[*].[Attachments[0].InstanceId,Attachments[0].VolumeId,Attachments[0].State,Size,Attachments[0].Device]'
fi
#
#
echo "Encrypted volume $evolume has replaced $volume on $instance/$host on block device $device"
#
# Apply Tags from original Volume to new Encrypted Volume.
#
tag_list=`/usr/local/bin/aws ec2 describe-tags --profile $profile --output text --filters "Name=resource-id,Values=$volume" | awk '{print "Key="$2",Value="$5}'`
/usr/local/bin/aws ec2 create-tags --profile $profile --resources $evolume --tags $tag_list
#
if [[ $verbose == '1' ]]; then
  echo "Tags copied to Encrypted Volume: $evolume"
  /usr/local/bin/aws ec2 describe-tags --profile $profile --output text --filters "Name=resource-id,Values=$evolume" | awk '{print "Key="$2",Value="$5}'
fi
